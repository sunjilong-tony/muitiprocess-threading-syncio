# coding= utf-8
'''
协程：又称微线程，是一种用户台的轻量级线程
发展历程：
1.最初的生成器变形yield/send
2.引入@asyncio,ccoroutine和yiedlform
3.在3.5版本引入async/await关键字
理解协程：
1.普通理解：线程是系统级别的，他们是由操作系统调度，协程是程序级别的，他是由
程序员根据需求自己调度，我们把一个线程中的一个个函数称为子程序，那么子程序在执行的过程中
中断去执行其他的子程序，其他的子程序也可以中断回来继续执行之前的子程序

2.专业理解
协程拥有自己的寄存器上下文和栈，协程在调度切换时，将寄存器山下文和栈保存到其他的地方
在切回来时，恢复先前保存的寄存器山下文和栈，因此，协程能保留上一次调用的状态，
每次过程重如时，就相当进入上一次调用的状态


子程序：在所有的语言中都是层层调用，比如a调用b，b调用c，最后a执行完毕，是通过栈实现的
一个线程就是执行一个子程序，子程序的调用总是由一个入口，一次返回，调用的顺序是明确的

优点：
1.无需线程尚习文切换的开销，协程避免了无意义的调度，提高了性能，
 但程序员必须承担自己承担调度的责任，同时也失去了标准线程使用多cpu的能力
2.无需原子操作锁定及同步的开销
3.方便切换控制流，简化变成模型
4.高并发+高扩展性+低成本，1个cpu支持上万个协程不是问题
缺点：
1.无法利用多核资源，协程的本质是单个线程，不能同时将单个cpu的多个核使用上，协程需要和
进程配合使用才能运行在多哦cpu上，但是一般不需要，除非是cpu是密集型的应用
2.进行阻塞操作，会阻塞整个程序
'''
